                      ScrambleSuit Protocol Specification
                                 Philipp Winter

0. Preliminaries

      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.

TODO:
    - Byte order
    - Clarify operators (e.g., concatenation)

X.  Authentication

    There exist two ways for a client to authenticate itself towards a
    ScrambleSuit server.  First, by redeeming a session ticket.  Second, by
    conducting a UniformDH handshake.  While a valid session ticket might not
    always be available, a client is always able to conduct a UniformDH
    handshake.  Both authentication mechanisms rely on a previously shared
    secret without which authentication cannot succeed.  This should thwart
    active probing attacks.

X.1 UniformDH Handshake

    A client can authenticate itself towards a ScrambleSuit server by
    conducting a UniformDH handshake.  UniformDH was originally proposed in the
    obfs3 protocol specification [XXX].  ScrambleSuit uses obfs3's UniformDH
    handshake with the single exception that it employs the 4096-bit MODP group
    number 16 as defined in RFC 3526 instead of the 1536-bit group used in
    obfs3.  Note that in order for UniformDH to succeed, both parties have a
    shared secret k_B which is exchanged out-of-band over Tor's BridgeDB.

    The handshake consists of two messages: one from the client to the server
    and one from the server to the client.  The diagram below illustrates the
    handshake.  After the 512-byte public key, random padding is appended.  The
    padding must be uniformly chosen from {0..988} bytes.  After the padding, a
    16-byte mark is appended which is defined as M = HMAC-SHA256-128(k_B, X).
    The mark is used to easily locate the MAC which is the last part of the
    handshake.  The MAC is defined as MAC = HMAC-SHA256-128(k_B, X || P_C ||
    E).  The variable E is the current Unix epoch divided by 3600.  It
    represents the amount of hours passed since the epoch.  It is used by the
    client and the server to prove liveness.

    Client                                    Server  Legend:
      |  X || P_C || M_C || MAC(X || P_C || E)  |     X: client public key
      | --------------------------------------> |     Y: server public key
      |  Y || P_S || M_S || MAC(X || P_S || E)  |     P: padding
      | <-------------------------------------- |     M: mark to locate the MAC
      |           AEnc(k_t+1 || T_t+1)          |     E: approximate timestamp
      | <-------------------------------------- |     k_t+1: future master key
      |            AEnc(Tor traffic)            |     T_t+1: future ticket
      | <-------------------------------------> |

X.2 Ticket Handshake

    A client can authenticate itself towards a ScrambleSuit server by redeeming
    a session ticket T.  The ticket contains the master key k_t and is
    encrypted by keys only available to the server.  The exact structure of a
    ticket is discussed in Section XXX.

    The handshake is a single message: the ticket along with padding and
    authenticating information.  The diagram below illustrates the handshake.
    After the 112-byte ticket, random padding is appended.  The padding must be
    uniformly chosen from {0..1388} bytes.  After the padding, a 16-byte mark
    is appended which is defined as M = HMAC-SHA256-128(k_t, T).  The mark is
    used to easily locate the MAC which is the last part of the handshake.  The
    MAC is defined as MAC = HMAC-SHA256-128(k_t, T || P || E).  The variable E
    is the current Unix epoch divided by 3600.  It represents the amount of
    hours passed since the epoch.  It is used by the client to prove liveness.

    Client                              Server  Legend:
      |  T || P || M || MAC(T || P || E)  |     T: session ticket
      | --------------------------------> |     P: random padding
      |       AEnc(k_t+1 || T_t+1)        |     M: mark to locate the MAC
      | <-------------------------------- |     E: approximate timestamp
      |         AEnc(Tor traffic)         |     k_t+1: future master key
      | <-------------------------------> |     T_t+1: future ticket

    The server is initially unable to distinguish between a session ticket
    handshake and a UniformDH handshake since both handshakes are
    computationally indistinguishable from randomness.  Therefore, it first
    tries to opportunistically decrypt the session ticket T after verifying its
    MAC first.  If the MAC is valid and the ticket can be decrypted and is not
    yet expired, the server then verifies the MAC which is built over T || P ||
    E.  If this MAC is valid, the handshake succeeded.  The server then
    proceeds to derive session keys as described in Section XXX.

    After a ticket handshake succeeded, the server replies by issuing a new
    session ticket T_t+1 together with the according master key k_t+1.  The
    tuple can then be used by the client to authenticate itself the next time.

    Finally, both parties share the same 256-bit master key k_t from which
    session keys are then derived as discussed in Section XXX.  Afterwards,
    data can be exchanged which is authenticated and encrypted.

X. Key Derivation

   After authenticating either by redeeming a ticket or by running UniformDH, a
   client and server will have a shared 256-bit master key.  Overall, 144 bytes
   of key material is derived from the master key using HKDF based on SHA256.
   For expansion, the master key is used as HKDF's PRK and the empty string as
   HKDF's "info" argument.

   The 144-byte output is used as follows:

     Byte 000:031 - 256-bit AES-CTR session key to send data.
     Byte 032:039 - 64-bit AES-CTR IV to send data.
     Byte 040:071 - 256-bit AES-CTR session key to receive data.
     Byte 072:079 - 64-bit AES-CTR IV to receive data.
     Byte 080:111 - 256-bit HMAC-SHA256-128 key to send data.
     Byte 112:143 - 256-bit HMAC-SHA256-128 key to receive data.

X. Header Format

   ScrambleSuit defines a 21-byte message header which contains the transported
   data.  The format of the header is depicted below.

   +----------+------------+--------------+--------+------------+------------+
   | 16 bytes |   2 bytes  |  2 bytes     | 1 byte | (optional) | (optional) |
   |   MAC    | Total len. | Payload len. | Flags  |  Payload   |  Padding   |
   +----------+------------+--------------+--------+------------+------------+
   \_ Plain _/ \____________  Encrypted and authenticated __________________/

   The 16-byte MAC refers to HMAC-SHA256-128 which is keyed by a dedicated and
   shared HMAC key.  The MAC authenticates the remainder of the message.  In
   accordance with the encrypt-then-MAC principle, the MAC is calculated after
   the remainder of the message is already encrypted.

   The 2-byte total length refers to the overall length of the message
   excluding the header whereas the 2-byte payload length refers to the payload
   only.  The difference between total length and payload length is padding
   which is used for packet length obfuscation.  Note that both fields can be
   set to 0 which results in an empty protocol message.  ScrambleSuit's maximum
   message length is 1448 bytes.  Exluding the header, this results in 1437
   bytes for the transported data.

   The 1-byte flag field is used for protocol signaling.  Below, all defined
   flags along with their semantics are explained.

   Flag name       | Bit # | Description
   ----------------+-------+-----------------------------------------------
   FLAG_PAYLOAD    |   1   | Application data.
   FLAG_NEW_TICKET |   2   | Newly issued session ticket and master key.
   FLAG_PRNG_SEED  |   3   | PRNG seed to derive obfuscation distributions.

   Finally, a ScrambleSuit message contains the transported data which is
   followed by padding.  Padding MUST always be discarded when a protocol
   message is processed.  Since padding is always encrypted, client and server
   MAY simply pad with 0 bytes.

   When ScrambleSuit protocol messages are received, the receiver first MUST
   validate the MAC.  If the MAC is invalid, the connection MUST be terminated
   immediately.

   References
   [XXX] https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/blob/HEAD:/doc/obfs3/obfs3-protocol-spec.txt
